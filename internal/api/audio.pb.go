// Code generated by protoc-gen-go. DO NOT EDIT.
// source: audio.proto

package api

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}

func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fae679ade197b92f, []int{0}
}

type UploadAudioRequest struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadAudioRequest) Reset()         { *m = UploadAudioRequest{} }
func (m *UploadAudioRequest) String() string { return proto.CompactTextString(m) }
func (*UploadAudioRequest) ProtoMessage()    {}
func (*UploadAudioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fae679ade197b92f, []int{0}
}

func (m *UploadAudioRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadAudioRequest.Unmarshal(m, b)
}
func (m *UploadAudioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadAudioRequest.Marshal(b, m, deterministic)
}
func (m *UploadAudioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadAudioRequest.Merge(m, src)
}
func (m *UploadAudioRequest) XXX_Size() int {
	return xxx_messageInfo_UploadAudioRequest.Size(m)
}
func (m *UploadAudioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadAudioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadAudioRequest proto.InternalMessageInfo

func (m *UploadAudioRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type UploadStatus struct {
	Message              string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=api.UploadStatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadStatus) Reset()         { *m = UploadStatus{} }
func (m *UploadStatus) String() string { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()    {}
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fae679ade197b92f, []int{1}
}

func (m *UploadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadStatus.Unmarshal(m, b)
}
func (m *UploadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadStatus.Marshal(b, m, deterministic)
}
func (m *UploadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadStatus.Merge(m, src)
}
func (m *UploadStatus) XXX_Size() int {
	return xxx_messageInfo_UploadStatus.Size(m)
}
func (m *UploadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UploadStatus proto.InternalMessageInfo

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterEnum("api.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
	proto.RegisterType((*UploadAudioRequest)(nil), "api.UploadAudioRequest")
	proto.RegisterType((*UploadStatus)(nil), "api.UploadStatus")
}

func init() { proto.RegisterFile("audio.proto", fileDescriptor_fae679ade197b92f) }

var fileDescriptor_fae679ade197b92f = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x37, 0x55, 0xb2, 0x38, 0x5b, 0x24, 0x0e, 0x88, 0xc5, 0xd3, 0xd2, 0x53, 0xf5, 0x90,
	0xc3, 0xee, 0xc5, 0xab, 0x2c, 0x88, 0x17, 0x11, 0x52, 0xf6, 0x01, 0xa2, 0x19, 0x24, 0x6c, 0x49,
	0x62, 0x93, 0xea, 0xeb, 0x4b, 0x53, 0x0a, 0xc5, 0x3d, 0xfe, 0x7c, 0x5f, 0x32, 0xff, 0x0c, 0x6c,
	0xf4, 0x60, 0xac, 0x97, 0xa1, 0xf7, 0xc9, 0xe3, 0x85, 0x0e, 0xb6, 0x96, 0x80, 0xc7, 0xd0, 0x79,
	0x6d, 0x9e, 0x47, 0xa2, 0xe8, 0x7b, 0xa0, 0x98, 0xb0, 0x82, 0xf5, 0xc1, 0xbb, 0x44, 0x2e, 0x55,
	0x6c, 0xcb, 0x9a, 0x52, 0xcd, 0xb1, 0x6e, 0xa1, 0x9c, 0xfc, 0x36, 0xe9, 0x34, 0xc4, 0xd1, 0x7c,
	0xa3, 0x18, 0xf5, 0x17, 0x65, 0xf3, 0x4a, 0xcd, 0x11, 0x1f, 0xe0, 0xf2, 0xe0, 0x0d, 0x55, 0xc5,
	0x96, 0x35, 0xd7, 0xbb, 0x5b, 0xa9, 0x83, 0x95, 0xcb, 0xa7, 0x23, 0x54, 0x59, 0x79, 0xdc, 0x83,
	0xf8, 0x4f, 0x70, 0x03, 0xeb, 0xa3, 0x3b, 0x39, 0xff, 0xeb, 0xc4, 0x0a, 0x39, 0x14, 0xef, 0x27,
	0xc1, 0x10, 0x80, 0xbf, 0x68, 0xdb, 0x91, 0x11, 0xc5, 0xee, 0x15, 0xca, 0xdc, 0xb9, 0xa5, 0xfe,
	0xc7, 0x7e, 0x12, 0x3e, 0x01, 0x9f, 0x3e, 0xc1, 0xbb, 0xc5, 0xac, 0xe5, 0x5a, 0xf7, 0x37, 0x67,
	0x25, 0xea, 0x55, 0xc3, 0x3e, 0x78, 0xbe, 0xc7, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x15, 0xf6,
	0xce, 0x97, 0x1e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AudioServiceClient is the client API for AudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AudioServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (AudioService_UploadClient, error)
}

type audioServiceClient struct {
	cc *grpc.ClientConn
}

func NewAudioServiceClient(cc *grpc.ClientConn) AudioServiceClient {
	return &audioServiceClient{cc}
}

func (c *audioServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (AudioService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AudioService_serviceDesc.Streams[0], "/api.AudioService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioServiceUploadClient{stream}
	return x, nil
}

type AudioService_UploadClient interface {
	Send(*UploadAudioRequest) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type audioServiceUploadClient struct {
	grpc.ClientStream
}

func (x *audioServiceUploadClient) Send(m *UploadAudioRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioServiceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AudioServiceServer is the server API for AudioService service.
type AudioServiceServer interface {
	Upload(AudioService_UploadServer) error
}

func RegisterAudioServiceServer(s *grpc.Server, srv AudioServiceServer) {
	s.RegisterService(&_AudioService_serviceDesc, srv)
}

func _AudioService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioServiceServer).Upload(&audioServiceUploadServer{stream})
}

type AudioService_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*UploadAudioRequest, error)
	grpc.ServerStream
}

type audioServiceUploadServer struct {
	grpc.ServerStream
}

func (x *audioServiceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioServiceUploadServer) Recv() (*UploadAudioRequest, error) {
	m := new(UploadAudioRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AudioService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AudioService",
	HandlerType: (*AudioServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _AudioService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "audio.proto",
}
